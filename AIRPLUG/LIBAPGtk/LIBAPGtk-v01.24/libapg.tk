#    libapgtk
#    a library for designing airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr
#    license type: free of charge license for academic and research purpose
#    see license.txt

### VARIABLES GLOBALES ########################################################

## Saving the application name defined by the programmer in the application.
## NB: this name can be overwritten by the user with option --appname but it is
##     needed for calling the correct start/stop procedures.
set ::APG_savedappname $APP
## Chemin pour retrouver les fichiers composant l'application
set PATH $APG_PATH/$APP$ll/$APP$ll

## Identite de l'instance de l'appli par defaut
#  NB : modifiable avec l'option --ident=
set APG_ident [info hostname]

## Icone par defaut
# NB : make icon dans APG_PATH/APP/APP permet de generer une icone, appellee
#      $APG_PATH/icons/apg-appicon-$app.ppm (necessite tgif installe).
#      Si elle n'est pas trouvee, utilisation de l'icone par defaut.
set APG_appiconnamedefault "apg-appicon-default.ppm"

## Zones a afficher (via option --display=eve,msg...)
set APG_lstdisplay [list ]

## Demarrage automatique de la procedure du bouton start
#  (APG_int_btstart), qui peut etre surchargee dans l'appli
set APG_auto false
#  Booleen permettant de reporter l'action apres le chargement de la lib
#  libapg-app-int.tk (sinon un cours délai pourrait lancer la procédure
#  APG_int_btstart avant qu'elle ne soit definie).
set auto false

## Delai avant demarrage automatique le cas echeant
#  (utile pour permettre a toutes les applications de se lancer)
set APG_delay 2000

## Liste des applications auquelles l'application s'abonnera si
#  APG_com_autobegin est appele (dans la surcharge de la procedure 
#  APG_int_btstart). Modifiable via l'option --begin=APP,APP
set APG_com_lstappautobegin [list ]

## Sauvegarde automatique (cf. libapg-svg.tk)
set APG_saving false
#  Periode inter-sauvegarde (si 0, sauvegarde evenementielle)
set APG_svg_period 0

## Execution sans tk ou non.
#  NB : implique une modification des applications. Voir application NTK.
#       Par defaut : avec tk (ie. interface graphique)
set APG_notk false

## Mode d'utilisation.
#  NB : modifiable avec l'option --mode=
set APG_mode ""
#  Modes disponibles :
set APG_mode_live "live"
set APG_mode_term "term"
set APG_mode_emul "emu"
set APG_mode_emulanim "emu+"
#  mode par defaut
set APG_mode_default $APG_mode_term

## Type de communication : what (w), whatwho (ww), whatwhowhere (www)
#  NB : modifiable avec les options --what, --whatwho, --whatwhowhere
set APG_comtype ""
## Arret appli ou non en cas de message non conforme au comtype
set APG_safemode false

## Stdin, stdout en binaire (peut etre change avec l'option --stdbin)
set APG_stdbin false

## Execution remote.
#  NB : modifiable avec l'option --remote=port
#       Par defaut : non remote (ie. pas de socket pour connecter l'app a RMT)
#       Necessite RMT d'installe, qui inclut libapg-rmt.tk
set APG_remote false
# Port pour le mode remote (cf. libapg-rmt.tk)
set APG_rmt_port 0
# Port par default pour le mode remote
# NB : d'apres l'IANA, ce numero de port n'est pas utilise (numero de tel BD)
set APG_rmt_portdefault 4646
# Host pour le mode remote (cf. libapg-rmt.tk)
set APG_rmt_host ""
# host par default pour le mode remote
set APG_rmt_hostdefault "localhost"
###############################################################################


###  CHARGEMENT LIBAPG-VRB ####################################################
# Pour la gestion des affichages dans le terminal.
# NB : ne peut intervenir avant la declaration des variables car on a besoin
#      de APG_ident. Ne peut intervenir plus tard car on a besoin des
#      affichages.
if { [ catch { source $APG_PATH/LIBAPGtk/LIBAPGtk/libapg-vrb.tk } ] } {

    set msg "Échec du chargement libapg-vrb.tk.\n \
    Verifier l'installation (utilisez-vous la derniere version ?)\n \
    Contacter l'equipe Airplug\n \
    \n \
	  erreur : $::errorInfo\n \
	  code : $::errorCode\n \
    \n \
    fin prematuree de l'application"

    set str "\033\[0;31m- $::app"
    if { [info exists ::APG_ident] } {
				append str  "\($::APG_ident\)"
    }

		append str " [format "%-14.14s" "libapg.tk"]"
    append str " | $msg$::APG_vrb_colrst"
		
    # NB : affichage de la chaine en une fois et non succession de
    # puts -nonewline pour eviter que les affichages de plusieurs
    # applications ne se melangent dans le terminal.
    puts stderr $str
    flush stderr

    exit
}

# Maintenant on peut afficher qu'on est en train de charger libapg.tk
if { $APG_LANG == "french" } {
		APG_vrb_dispnotif "Chargement de libapg.tk" "libapg" 2
} else {
		APG_vrb_dispnotif "Loading libapg.tk" "libapg" 2
}

# Ce message ne peut intervenir avant...
if { $APG_LANG == "french" } {
		APG_vrb_dispnotif "  Chargement de libapg-vrb.tk (affichages dans le terminal)" "libapg" 4
} else {
		APG_vrb_dispnotif "  Loading libapg-vrb.tk (display in the terminal)" "libapg" 4
}
###############################################################################


### DECODAGE DES OPTIONS ######################################################
if { $APG_LANG == "french" } {
		APG_vrb_dispnotif "  Décodage des arguments de la ligne de commande" "libapg" 3
} else {
		APG_vrb_dispnotif "  Decoding command-line options" "libapg" 3
}

# pour prevenir les arguments colles dans un seul...
set chaine_args [join $argv]
set APG_lstargs [split $chaine_args " "]
# pour compatibilite :
set liste_args $APG_lstargs

# index de parcours
set i 0
# memorisation de la presence de certaines options pour l'analyse ulterieure
set is_appname false
set is_begin false
set is_display false
set is_stdbin false
set is_iconic false
set is_ident false
set option [lindex $liste_args $i]
while { $option != "" } {
    set option_liste [split $option '=' ]

    #### Option --appname ####
    # Permet de lancer un programme appele toto avec le nom tutu.
    # Utile pour lancer deux instances d'un meme programme avec des noms differents
    # NB : interdit pour l'application EMU qui doit garder ce nom !
    if { [lindex $option_liste 0] == "--appname" } {
				set is_appname true
				set appname [lindex $option_liste 1]
				if { $appname == "" } {
						if { $APG_LANG == "french" } {
								APG_vrb_dispwarning "    Option --appname sans argument => nom de l'application par defaut \[$APP\]" "libapg"
						} else {
								APG_vrb_dispwarning "    Option --appname without argument => using default application name \[$APP\]" "libapg"
						}
				} else {
						if { $APP == "EMU" || $appname == "EMU" } {
								if { $APG_LANG == "french" } {
										APG_vrb_disperror "    Option --appname avec EMU => interdit" "libapg"
								} else {
										APG_vrb_disperror "    Option --appname with EMU => forbidden" "libapg"
								}										
								exit
						}
						# Pour se premunir d'arguments de type aBc
						set APP [string toupper $appname]
						set app [string tolower $appname]
						if { $APG_LANG == "french" } {
								APG_vrb_dispnotif "   Option --appname trouvée \[$appname\]: app=$app, APP=$APP" "libapg" 4
						} else {
								APG_vrb_dispnotif "   Option --appname found \[$appname\]: app=$app, APP=$APP" "libapg" 4
						}
				}
    }
    
    #### Option --auto ####
    if { [lindex $option_liste 0] == "--auto" } {
				set APG_auto true
				set tmp [lindex $option_liste 1]
				if { $tmp == "" } {
						APG_vrb_dispnotif "    Option --auto sans argument => delai par defaut pour demarrage auto \[$APG_delay ms\]" "libapg" 4
				} else {
						set APG_delay $tmp
						APG_vrb_dispnotif "    Option --auto trouvée \[$APG_delay ms\]" "libapg" 4
				}
    }

    #### Option --begin ####
    if { [lindex $option_liste 0] == "--begin" } {
				# option --begin trouvee
				if { [lindex $option_liste 1] == "" } {
						APG_vrb_dispwarning "    Option --begin sans argument => ignorée" "libapg"
				} else {
						set is_begin true
						set APG_com_lstappautobegin [lindex $option_liste 1]
						APG_vrb_dispnotif "    Option --begin=$APG_com_lstappautobegin trouvée" "libapg" 4
				}
    }

    #### Option --display ####
    if { [lindex $option_liste 0] == "--display" } {
				# option --display trouvee
				if { [lindex $option_liste 1] == "" } {
						APG_vrb_dispwarning "    Option --display sans argument => ignorée" "libapg"
				} else {
						set is_display true
						set APG_lstdisplay [lindex $option_liste 1]
						APG_vrb_dispnotif "    Option --display=$APG_lstdisplay trouvée" "libapg" 4
				}
    }

    #### Option --iconic ####
    if { $option == "--iconic" } {
				# option --iconic trouvee
				APG_vrb_dispnotif "    Option --iconic trouvée" "libapg" 4
				set is_iconic true
    }

    #### Option --ident ####
    if { [lindex $option_liste 0] == "--ident" } {
				set is_ident true
				set APG_ident [lindex $option_liste 1]
				if { $APG_ident == "" } {
						set APG_ident $APP[pid]
						APG_vrb_dispwarning "    Option --ident sans argument => ident par defaut \[$APG_ident\]" "libapg"
				} else {
						APG_vrb_dispnotif "    Option --ident trouvée \[$APG_ident\]" "libapg" 4
				}
    }
    

    # 		if { [lindex $option_liste 0] == "--iconname" } {
    # 				# option --iconname trouvee
    # 				set APG_iconname [lindex $option_liste 1]
    # 				if { $APG_iconname == "" } {
    # 						APG_vrb_dispwarning "option --iconname sans argument"
    # 				} else {
    # 						APG_vrb_dispnotif "option --iconname trouvee \[$APG_iconname\]"
    # 				}
    # 		}


    #### Option --mode ####
    if { [lindex $option_liste 0] == "--mode" } {
				set value [lindex $option_liste 1]
				if {$value == ""} {
						APG_vrb_disperror "    Option --mode sans valeur. Utiliser $APG_mode_live, $APG_mode_term, $APG_mode_emul" "libapg"
						exit
						
				} elseif {$value == $APG_mode_live} {
						APG_vrb_dispnotif "    Option --mode=$APG_mode_live, execution reelle avec Airplug" "libapg" 4
						set APG_mode $APG_mode_live
						
				} elseif {$value == $APG_mode_term} {
						APG_vrb_dispnotif "    Option --mode=$APG_mode_term, execution avec le terminal" "libapg" 4
						set APG_mode $APG_mode_term
						
				} elseif {$value == $APG_mode_emul} {
						APG_vrb_dispnotif "    Option --mode=$APG_mode_emul, execution en emulation avec EMU (sans animation)" "libapg" 4
						set APG_mode $APG_mode_emul
						
				} elseif {$value == $APG_mode_emulanim} {
						APG_vrb_dispnotif "    Option --mode=$APG_mode_emulanim, execution en emulation avec EMU et animations" "libapg" 4
						set APG_mode $APG_mode_emulanim
						
				} else {
						APG_vrb_disperror "    Option --mode avec valeur inconnue" "libapg"
						exit
				}
    }
		
    #### Option --notk ####
    if { $option == "--notk" || [lindex $option_liste 0] == "--notk" } {
				set APG_notk true
				APG_vrb_dispnotif "    Option --notk trouvée => pas d'interface graphique" "libapg" 4
    }

    #### Option --remote ####
    if { $option == "--remote" || [lindex $option_liste 0] == "--remote" } {
				# option --remote trouvee
				set APG_remote true
				
				set hostport [lindex $option_liste 1]
				if { [string is integer $hostport] } {
						# the given value is only a port
						set host ""
						set port $hostport
				} else {
						set host [lindex [split $hostport ":"] 0]
						set port [lindex [split $hostport ":"] 1]
				}
				if { $host != "" } {
						set APG_rmt_host $host
						APG_vrb_dispnotif "    Found host=\[$host\] with --remote option" "libapg" 5
				} else {
						set APG_rmt_host $APG_rmt_hostdefault
						APG_vrb_dispwarning "    Invalid host with --remote option \[$host\], using default \[$APG_rmt_host\]"
				}
				if { $port != "" && $port != 0 } {
						set APG_rmt_port $port
						APG_vrb_dispnotif "    Found port=\[$port\] with --remote option" "libapg" 5
				} else {
						set APG_rmt_port $APG_rmt_portdefault
						APG_vrb_dispwarning "    Invalid port with --remote option \[$port\], using default \[$APG_rmt_port\]"
				}
				APG_vrb_dispnotif "    Option --remote= found, \[host=$APG_rmt_host, port=$APG_rmt_port\]\n \
                                    connection to remote RMT application" "libapg" 4
    }
    #### Option --safemode ####
    if { $option == "--safemode" } {
				set APG_safemode true
				APG_vrb_dispnotif "    Option --safemode trouvée => interpretation stricte du format d'echange" "libapg" 4
    }
    
    #### Option --saving ####
    if { $option == "--saving" || [lindex $option_liste 0] == "--saving" } {
				# option --saving trouvee
				set APG_saving true
				set APG_svg_period [lindex $option_liste 1]
				if { $APG_svg_period == "" || $APG_svg_period == 0 } {
						set APG_svg_period 0
						APG_vrb_dispnotif "    Option --saving trouvée, periode nulle => sauvegarde evenementielle" "libapg" 4
				} else {
						APG_vrb_dispnotif "    Option --saving= trouvée, periode=$APG_svg_period => sauvegarde periodique" "libapg" 4
				}
    }

    #### Option --stdbin ####
    if { $option == "--stdbin" } {
				# option --stdbin trouvee
				APG_vrb_dispnotif "    Option --stdbin trouvée" "libapg" 4
				set APG_stdbin true
				set is_stdbin true
    }

    
    #### Option --what ####
    if { $option == "--what" } {
				if { $APG_comtype != "" } {
						APG_vrb_dispwarning "    Option --what annule precedent format ($APG_comtype)" "libapg"
				}
				set APG_comtype w
				APG_vrb_dispnotif "    Option --what trouvée => format d'echanges w" "libapg" 4
    }
    
    #### Option --whatwho ####
    if { $option == "--whatwho" } {
				if { $APG_comtype != "" } {
						APG_vrb_dispwarning "    Option --whatwho annule precedent format ($APG_comtype)" "libapg"
				}
				set APG_comtype ww
				APG_vrb_dispnotif "    Option --whatwho trouvée => format d'echanges ww" "libapg" 4
    }
    
    #### Option --whatwhowhere ####
    if { $option == "--whatwhowhere" } {
				if { $APG_comtype != "" } {
						APG_vrb_dispwarning "    Option --whatwhowhere annule precedent format ($APG_comtype)" "libapg"
				}
				set APG_comtype www
				APG_vrb_dispnotif "    Option --whatwhowhere trouvée => format d'echanges www" "libapg" 4
    }
		
    incr i
    set option [lindex $liste_args $i]
}
###############################################################################


### ANALYSE OPTIONS ###########################################################
# NB : affichage des options non trouvees pour annoncer options existantes,
#      initialiser valeurs par defaut et annoncer ces valeurs.
#      (si option verbose uniquement)
APG_vrb_dispnotif "  Analyse des options de la ligne de commande" "libapg" 3

## Impossible d'etre remote et live a la fois
# NB : remote signifie "connexion a distance via socket a l'application RMT,
#      qui, elle, peut etre en mode term, live, emu, emu+...
if { $APG_mode == $APG_mode_live && $APG_remote == true } {
    APG_vrb_disperror "  Execution remote incompatible avec mode $APG_mode_live" "libapg"
    exit
}

## L'option appname a-t-elle ete oubliee ?
if { $is_appname == false } {
    APG_vrb_dispnotif "    No option --appname= => using default application name \[$APP\]" "libapg" 4
}
## Verification de la coherence du nom donne a l'application...
if { ([string tolower $APP] != $app) || ([string toupper $app] != $APP) } {
    APG_vrb_dispwarning "  non respect de la convention entre les noms APP=$APP et app=$app" "libapg"
}

## L'option demarrage auto a-t-elle ete oubliee ?
if { $APG_auto == false } {
		if { $APG_notk == true } {
				APG_vrb_dispwarning "    No --auto option while using --notk option (no GUI) => app will not start" "libapg"
		} else {
				APG_vrb_dispnotif "    No option --auto ou --auto=nb_ms => manual starting (default)" "libapg" 4
		}
}
#  else {
#     ## Si mode remote, alors demarrage auto differe jusqu'a la connexion
#     ## a airplug via RMT.
#     if { $APG_remote == true } {
# 				APG_vrb_dispwarning "  option --auto en execution remote => demarrage automatique apres connexion" "libapg"
#     } else {
# 				# Lancement automatique de la procedure associee au bouton start apres
# 				# APG_delay millisecondes
# 				# Action reportee apres le chargement de libapg-int.tk.
# 				set auto true
#     }
# }

## L'option begin a-t-elle ete oubliee ?
if { $is_begin == false } {
    APG_vrb_dispnotif "    No option --begin=aaa,bbb => no automatic subscribing to applications aaa, bbb" "libapg" 4
} else {
		set lstapp [split $APG_com_lstappautobegin ","]
		set strapp [join $lstapp " "]
		if { [llength $lstapp] > 1 } {
				APG_vrb_dispnotif "    Option --begin= => demande d'abonnement automatique aux applications \[$strapp\]" "libapg" 4
		} else {
				APG_vrb_dispnotif "    Option --begin= => demande d'abonnement automatique a l'application \[$strapp\]" "libapg" 4
		}
}

## L'option display a-t-elle ete oubliee ?
if { $is_display == false } {
    APG_vrb_dispnotif "    No option --display=aaa,bbb => no area automatically displayed " "libapg" 4
} else {
		if { $APG_notk } {
				APG_vrb_dispwarning "    Option --display= ignored because of option --notk" "libapg"
				set APG_lstdisplay [list ]
		} else {
				set APG_lstdisplay [split $APG_lstdisplay ","]
				if { [llength $APG_lstdisplay] >= 1 } {
						# Set the tabzone array for the zones in list of option --display
						foreach Z $::APG_lstdisplay {
								if { $APG_LANG == "french" } {
										APG_vrb_dispnotif "      Intégration de l'aire $Z à l'interface graphique" "libapg" 5
								} else {
										APG_vrb_dispnotif "      Integrating $Z area to the GUI" "libapg" 5
								}								
								set ::APG_int_tabzones($Z) 1
						}
				}
				if { $APG_LANG == "french" } {
						APG_vrb_dispnotif "    Option --display= => aires affichées automatiquement \[$APG_lstdisplay\] " "libapg" 4
				} else {
						APG_vrb_dispnotif "    Option --display= => areas automatically displayed \[$APG_lstdisplay\] " "libapg" 4
				}
		}
}

## L'option binary a-t-elle ete oubliee ?
if { $is_stdbin == false } {
    APG_vrb_dispnotif "    No option --stdbin => stdin and stdout not configured for binary transfer" "libapg" 4
}

## mode de debug
if { $APG_vrb_debug == false } {
    APG_vrb_dispnotif "    No option --debug => will not display debug messages" "libapg" 4
}

## L'option iconic a-t-elle ete oubliee ?
if { $is_iconic == false } {
    APG_vrb_dispnotif "    No option --iconic => the application will not be iconified" "libapg" 4
} else {
    # directive inutile avec notk
    if { $APG_notk == true } {
				APG_vrb_dispwarning "  option --iconic sans objet avec option --notk (pas d'interface a iconifier)" "libapg"
    } else {
				update idletasks
				wm iconify .
    }
}

if { $is_ident == false } {
    APG_vrb_dispnotif "    No option --ident= => using default instance name \[$APG_ident\]" "libapg" 4
}

## L'option mode d'utilisation a-t-elle ete oubliee ?
if { $APG_mode == "" } {
    APG_vrb_dispnotif "    No option --mode=$APG_mode_live/$APG_mode_term/$APG_mode_emul/$APG_mode_emulanim => will use default mode \[$APG_mode_default\]" "libapg" 4
    set APG_mode $APG_mode_default
}

## L'option notk a-t-elle ete oubliee ?
if { $APG_notk == false } {
    APG_vrb_dispnotif "    No option --notk => creating GUI" "libapg" 4
}

## L'option remote a-t-elle ete oubliee ?
if { $APG_remote == false } {
    APG_vrb_dispnotif "    No option --remote ou --remote=port => no remote connection through sockets to the RMT remote app" "libapg" 4
}

## L'option safemode a-t-elle ete oubliee ?
if { $APG_safemode == false } {
    APG_vrb_dispnotif "    No option --safemode => will attempt to recover in cae of message format mismatch" "libapg" 4
}

## L'option saving a-t-elle ete oubliee ?
if { $APG_saving == false } {
    APG_vrb_dispnotif "    No option --saving => no saving, either periodic or event-based" "libapg" 4
}

## L'option verbose a-t-elle ete oubliee ?
if { $::APG_vrb_optionverbose == false } {
		# Pas d'option --verbose sur la ligne de commande
		if { $APG_vrb_level != -1 } {
				## La configuration n'interdit pas absolument les affichages dans le terminal
				## NB : verbose = -1 => strictement aucun affichage dans le terminal
				APG_vrb_dispnotif "No --verbose option => using default verbose level \[$APG_vrb_level\]" "libapg" 0
		}
} else {
		switch -- $APG_vrb_level {
				"-1" {
						# Strictement aucun affichage
				}

				"0" { APG_vrb_dispnotif "Option --verbose=0 => displaying only errors from now (try --verbose=-1 for no printing)" "libapg" 0 }

				"1" { APG_vrb_dispnotif "Option --verbose or --verbose=1 => only errors and warning are displayed from now (try --verbose=0 or --verbose=-1 for less printing)" "libapg" 0 }

				"2" { APG_vrb_dispnotif "  Option --verbose=$APG_vrb_level => displaying errors, warning and notifications up to level $APG_vrb_level" "libapg" 0
				}
				
				default {
						# NB: the difference is on the spaces at the beginning of the string
						APG_vrb_dispnotif "    Option --verbose=$APG_vrb_level => displaying errors, warning and notifications up to level $APG_vrb_level" "libapg" 0
				}
		}
}

## Analyse option comtype (oubli / compatibilite mode)
if { $APG_comtype == "" } {
    # Option oubliee => choix par defaut du comtype, qui depend du mode
    if { $APG_mode == $APG_mode_live || $APG_mode == $APG_mode_emul || $APG_mode == $APG_mode_emulanim } {
				# Ces modes requierent le comtype whatwhowhere
				APG_vrb_dispnotif "    No option --what/--whatwho/--whatwhowhere => using default message format with mode $APG_mode \[whatwhowhere\]" "libapg" 4
				set APG_comtype "www"
    } else {
				# Autre mode (term) => comtype what
				APG_vrb_dispnotif "    No option --what/--whatwho/--whatwhowhere => using default message format \[what\]" "libapg" 4
				set APG_comtype "w"
    }
} else {
    # Une option --what/--whatwho/--whatwhowhere a ete fournie
    if { $APG_comtype != "www" && \
						 ( $APG_mode == $APG_mode_live || $APG_mode == $APG_mode_emul || $APG_mode == $APG_mode_emulanim ) } {
				# Une option autre que  --whatwhowhere a ete fournie alors que le mode ne le permet pas.
				APG_vrb_dispnotif "    Option --what/--whatwho incompatible avec mode $APG_mode => format de message = whatwhowhere" "libapg" 4
				APG_vrb_dispwarning "    Format de message change en whatwhowhere" "libapg"
				set APG_comtype "www"
    }
}

# Pour compatibilite avec ancien nom
set APG_rcvtype $APG_comtype
###############################################################################



## GESTION DE L'ICONE #########################################################
## L'icone indique existe-t-elle ?
## NB : on cherche une icône de nom APPtk/APPtk/icons/apg-appicon-apptk.ppm ou
##      sinon de nom APPtk/APPtk/icons/apg-appicon-app.ppm pour compatibilite
if { [ file exists $APG_PATH/icons/apg-appicon-$app$ll.ppm ] } {
		if { $::APG_LANG == "french" } {
				APG_vrb_dispnotif "  Icône de l'application trouvée" "libapg" 2
		} else {
				APG_vrb_dispnotif "  Application icon found" "libapg" 4
		}
    set APG_appiconname "apg-appicon-$app$ll.ppm"
} elseif { [ file exists $APG_PATH/icons/apg-appicon-$app.ppm ] } {
		if { $::APG_LANG == "french" } {
				APG_vrb_dispnotif "  Icône de l'application trouvée" "libapg" 2
		} else {
				APG_vrb_dispnotif "  Application icon found" "libapg" 4
		}
    set APG_appiconname "apg-appicon-$app.ppm"
} else {
		if { $::APG_LANG == "french" } {
				APG_vrb_dispwarning "  Aucune icône trouvée pour cette application => utilisation de l'icône par défaut" "libapg"
		} else {
				APG_vrb_dispwarning "  No icon found for this application => using default icon" "libapg"
		}
		if { ![ file exists $APG_PATH/icons/$APG_appiconnamedefault ] } {
				if { $::APG_LANG == "french" } {
						APG_vrb_disperror "    Icône par défaut non trouvée" "libapg"
				} else {
						APG_vrb_disperror "    Default icon not found" "libapg"
				}
				if { $APG_notk == true } {
						if { $::APG_LANG == "french" } {
								APG_vrb_dispwarning "    Erreur d'icône ignorée car pas d'interface graphique (--notk option)" "libapg"
						} else {
								APG_vrb_dispwarning "    Icon error ignored because no GUI (--notk option)" "libapg"
						}
				} else {
						exit
				}
    } else {
				set APG_appiconname $APG_appiconnamedefault
    }
}		
###############################################################################





### CREATION FENETRE APPLICATION ##############################################
if { $APG_notk == true } {
		if { $::APG_LANG == "french" } {
				APG_vrb_dispwarning "  Option notk => pas d'interface graphique créée" "libapg"
		} else {
				APG_vrb_dispwarning "  Option notk => no GUI created" "libapg"
		}
} else {

		# nom standard des fenetres et appicons (windowmaker)
		#wm title . "\[airplug\] app=$APP ident=$APG_ident"
		wm title . "$APP on node $APG_ident"
		wm iconname . "$APP/$APG_ident"
		
		# Gestion des icones sous windowmaker
		wm command . "$APP/$APG_ident"
		wm group . .

		# Creation d'une fenetre a utiliser en guise d'appicon (window maker)
		# Pour avoir l'icone semblable, utiliser le menu "Attributs" de l'application,
		# qui permet aussi de preciser l'ecran virtuel de demarrage (window maker).
		if { [ catch {
				set iconimg [image create photo -file $APG_PATH/icons/$APG_appiconname]
		} ] } {
				if { $::APG_LANG == "french" } {
						APG_vrb_disperror "Échec de l'utilisation de l'appicon $APG_appiconname (répertoire icons)" "libapg"
				} else {
						APG_vrb_disperror "Using appicon $APG_appiconname failed (icons directory)" "libapg"
				}
				exit
		} else {
				set iconwin ".root:iconwin"
				toplevel $iconwin
				label $iconwin.label -image $iconimg
				pack $iconwin.label
				wm iconwindow . $iconwin
				# iconimg est utilise dans libapg-ckz.tk
		}
}
# fin du else du if --notk
###############################################################################


## PROCEDURE DE CHARGEMENT DES BIBLIOTHEQUES ##################################
## NB : charger les bibliotheques via une procedure implique de referencer les
##      variables globales en :: (ie. $::APG_ident au lieu de $APG_ident).

#-- Procedure APG_loadlib ----------------------------------------------------#
# Action : source une bibliotheque et gere les eventuelles erreurs            #
# Entree : le suffixe sss de la bibliotheque, nomee libapg-sss.tk             #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_loadlib { lib } {
    # Test d'un eventuel probleme lors du chargement. Quitte si probleme.

		if { $::APG_LANG == "french" } {
				APG_vrb_dispnotif "    Chargement de libapg-$lib.tk" "libapg" 3
		} else {
				APG_vrb_dispnotif "    Loading libapg-$lib.tk" "libapg" 3
		}				

    if { [info exists ::errorInfo] } {
				unset ::errorInfo
    }
    if { [info exists ::errorCode] } {
				unset ::errorCode
    }
		
    if { [ catch { source $::APG_PATH/LIBAPGtk/LIBAPGtk/libapg-$lib.tk } msg_erreur] } {
				# Si debug alors on affiche la cause de l'erreur
				if { $::APG_vrb_debug == true } {
						if { $::APG_LANG == "french" } {
								APG_vrb_disperror "Échec du chargement libapg-$lib.tk.\n \
                           Verifier l'installation (utilisez-vous la derniere version ?)\n \
                           Contacter l'equipe Airplug\n \
	                   retour : $msg_erreur\n \
	                   erreur : $::errorInfo\n \
	                   code   : $::errorCode\n \
                           fin prematuree de l'application"
						} else { 
								APG_vrb_disperror "loading libapg-$lib.tk failed.\n \
                           Check the installation (are-you using the last version?)\n \
                           Please contacter the Airplug team\n \
	                   return : $msg_erreur\n \
	                   error  : $::errorInfo\n \
	                   code   : $::errorCode\n \
                           ending prematurely the application"
						}
				} else { 
						if { $::APG_LANG == "french" } {
								APG_vrb_disperror "Échec du chargement libapg-$lib.tk.\n \
                           Verifier l'installation (utilisez-vous la derniere version ?)\n \
                           Contacter l'equipe Airplug\n \
                           fin prematuree de l'application"
						} else {
								APG_vrb_disperror "loading libapg-$lib.tk failed.\n \
                           Check the installation (are-you using the last version?)\n \
                           Please contacter the Airplug team\n \
                           ending prematurely the application"
						}
				}
				exit
    }
		
    if { [info exists ::errorInfo] } {
				unset ::errorInfo
    }
    if { [info exists ::errorCode] } {
				unset ::errorCode
    }
}


#-- Procedure APG_loadapplib -------------------------------------------------#
# Action : source une bibliotheque d'application et gere les erreurs          #
# Entree : le suffixe sss de la bibliotheque, nomee libapg-app-sss.tk         #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_loadapplib { lib } {
    # Test d'un eventuel probleme lors du chargement. Quitte si probleme.

		if { $::APG_LANG == "french" } {
				APG_vrb_dispnotif "    Chargement de libapg-app-$lib.tk" "libapg" 3
		} else {
				APG_vrb_dispnotif "    Loading libapg-app-$lib.tk" "libapg" 3
		}
		
    if { [info exists ::errorInfo] } {
				unset ::errorInfo
    }
    if { [info exists ::errorCode] } {
				unset ::errorCode
    }

    if { [ catch { source $::APG_PATH/LIBAPGtk/LIBAPGtk/libapg-app-$lib.tk } msg_erreur] } {
				# Si debug alors on affiche la cause de l'erreur
				if { $::APG_vrb_debug != true } {
						if { $::APG_LANG == "french" } {
								APG_vrb_dispwarning "Échec du chargement de la bibliotheque de l'application [string toupper $lib] (libapg-app-$lib.tk).\n \
                           Verifier l'installation (utilisez-vous la derniere version ?)\n \
                           Contacter l'equipe Airplug"
						} else {
								APG_vrb_dispwarning "loading the library of application [string toupper $lib] failed (libapg-app-$lib.tk).\n \
                           Check the installation (are-you using the last version?)\n \
                           Please contacter the Airplug team"
						}
				} else {
						if { $::APG_LANG == "french" } {
								APG_vrb_dispwarning "\n \
	                   retour : $msg_erreur\n \
	                   erreur : $::errorInfo\n \
	                   code   : $::errorCode" "libapg"
						} else {
								APG_vrb_dispwarning "\n \
	                   return : $msg_erreur\n \
	                   error  : $::errorInfo\n \
	                   code   : $::errorCode" "libapg"
						} 								
				}
    }
		
    if { [info exists ::errorInfo] } {
				unset ::errorInfo
    }
    if { [info exists ::errorCode] } {
				unset ::errorCode
    }
}
###############################################################################

## CHARGEMENT DES BIBLIOTHEQUES COMMUNES ######################################
if { $::APG_LANG == "french" } {
		APG_vrb_dispnotif "  Chargement des bibliothèques communes" "libapg" 2
} else {
		APG_vrb_dispnotif "  Loading common libraries" "libapg" 2
}

# libapg-int.tk : gestion de l'interface des applications Airplug Tcl/Tk
# NB : chargee en premier car definit des variables couleur, etc.
#      utilisees dans les autres bibliotheques.
APG_loadlib "int"

# Activation du depart automatique s'il y a lieu.
# NB : action decidee lors de l'analyse des options et reportee apres le
#      chargement de libapg-int.tk
#if { $auto == true } {
#    after $APG_delay APG_int_btstart
#}
# MODIF : a reporter apres la lecture de tout le code de l'appli d'ou APG_int_autostart

# TODO : conditionnel notk (+int ?)
# TODO : on loupe tous les messages precedents dans les evenements !! cf. vrb
APG_loadlib "eve"

# libapg-svg.tk : gestion des sauvegardes periodiques ou evenementielles
APG_loadlib "svg"

# libapg-msg.tk : gestion du contenu des messages (payload)
APG_loadlib "msg"

# libapg-com.tk : gestion des communications inter-applications
# NB : n'est pas suffisante en elle-meme ; doit etre completee selon le mode.
APG_loadlib "com"

# libapg-sta.tk : gestion du demarrage (auto, notk...)
APG_loadlib "sta"

# Ajout des zones graphiques dans le menu, avec affichage par defaut
# (0 => non affiche, 1 => affiche)
proc ismember { L str } {
		if { [lsearch $L $str] >= 0 } {
				return 1
		} else {
				return 0
		}
}
APG_int_addzone msg "Contenus msg"	 [ismember $APG_lstdisplay "msg"]
APG_int_addzone com "Communications" [ismember $APG_lstdisplay "com"] "-expand true -fill both -pady 2"
APG_int_addzone eve "Evénements"		 [ismember $APG_lstdisplay "eve"] "-expand true -fill both -pady 2"
APG_int_addzone svg "Sauvegardes"	   [ismember $APG_lstdisplay "svg"]
APG_int_addzone ico "Sponsors"		   [ismember $APG_lstdisplay "ico"]

###############################################################################


## CHARGEMENT DES BIBLIOTHEQUES OPTIONNELLES ##################################
if { $::APG_LANG == "french" } {
		APG_vrb_dispnotif "  Chargement des bibliothèques optionnelles (mode=$APG_mode, remote=$APG_remote)" "libapg" 2
} else {
		APG_vrb_dispnotif "  Loading optional libraries (mode=$APG_mode, remote=$APG_remote)" "libapg" 2
}

# MODE TERMINAL
if { $APG_mode == $APG_mode_term } {
    APG_loadlib "snd"
    APG_loadlib "rcv"
    APG_loadlib "sub"
}

# MODE EMULATION
if { $APG_mode == $APG_mode_emul || $APG_mode == $APG_mode_emulanim } {
    # mode emulation => emulation du reseau via EMU
    # ecritures sur stdout, lecture sur stdin formatees ou non pour EMU
    
    APG_loadlib "snd"
    APG_loadlib "rcv"
    APG_loadlib "sub"
    APG_loadlib "emu"
}

# MODE LIVE
if { $APG_mode == $APG_mode_live } {
    # mode live => utilisation de airplug
    # ecritures sur stdout, lectures sur stdin formatees pour airplug

    APG_loadlib "snd"
    APG_loadlib "rcv"
    APG_loadlib "apg"
}

# MODE REMOTE
if { $APG_remote == "true" } {
    # execution remote : connexion via socket locale, jusqu'a l'appli RMT s'executant
    # ecritures et lectures formatees sur socket, formatees pour RMT
    
    APG_loadlib "snd"
    APG_loadlib "rcv"
    APG_loadlib "sub"

    APG_loadlib "rmt"
}

# Ajout d'un separateur dans le menu apres les entrees liees aux bibliotheques
# de la suite airplug
APG_int_addseparator

###############################################################################



## CHARGEMENT DES BIBLIOTHEQUES DES APPLICATIONS ##############################
if { $::APG_LANG == "french" } {
		APG_vrb_dispnotif "  Chargement des bibliothèques des applications installées" "libapg" 2
} else {
		APG_vrb_dispnotif "  Loading libraries of installed applications" "libapg" 2
}
## Chargement des bibliotheques des applications presentes
# TODO : supporter des . dans les noms de repertoire.
foreach F [glob -nocomplain $APG_PATH/LIBAPGtk/LIBAPGtk/libapg-app-*.tk] {
#    APG_vrb_dispnotif "  fichier [file tail $F] trouve" "libapg" 3

    set begin [expr [string first "libapg-app" $F] + 11]
    set end [expr [string first "." $F] -1]
    set lib [string range $F $begin $end]
    APG_loadapplib $lib 
}



# Ajout d'un separateur dans le menu apres les entrees liees aux bibliotheques
# des applications
APG_int_addseparator
###############################################################################




#tk_setPalette snow2
#tk_setPalette LightSteelBlue
#tk_setPalette wheat4
#tk_bisque
