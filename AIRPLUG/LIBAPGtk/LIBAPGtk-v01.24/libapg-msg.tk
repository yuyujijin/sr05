#    libapg-msg.tk
#    a library for designing airplug compatible program
#    authors: Bertrand Ducourthial AT utc.fr
#    license type: free of charge license for academic and research purpose
#    see license.txt
#
# Gestion des messages

if { $::APG_LANG == "french" } {
		APG_vrb_dispnotif "      Integration de la gestion du formatage des messages" "libapg-msg" 4
} else {
		APG_vrb_dispnotif "      Adding message formating facilities" "libapg-msg" 4
}

### VARIABLES DE LA BIBLIOTHEQUE ##############################################

#-- Taille message -----------------------------------------------------------#
# NB : reprise ici des conventions de LIBAPGC. Ne pas modifier !              
# NB : definitions communes aux differents modes d'utilisation pour faciliter
#      le passage de l'un a l'autre

# Taille max d'un message inter-sites en octets (nb char) 
# NB : devrait etre inferieur a PIPE_BUF et a MSS du protocole inter-sites
set ::APG_msg_nbc_all 1440

# 3 caracteres pour iac_data.act + '\0'
set ::APG_msg_nbc_act 4 
set ::APG_msg_nbc_app 4
set ::APG_msg_nbc_hst 10

# Taille max du champ controle dans les message inter-sites
set ::APG_msg_nbc_ctl 256

# Taille max du champ argument. Calcul dans le cas d'un msg inter-sites car
# plus court que dans le cas d'un msg emis par une app locale
set ::APG_msg_nbc_arg \
		[expr ($::APG_msg_nbc_all - 2*$::APG_msg_nbc_app - 2*$::APG_msg_nbc_hst - $::APG_msg_nbc_ctl)]
#-----------------------------------------------------------------------------#


#-- Jockers standards --------------------------------------------------------#
# Symbole egalite qui n'est pas = pour ne pas gener les conditions de HOP
set ::APG_msg_eq "~"
# Delimiteur de champ
# NB : preferer un caractere de l'ASCII 7 bits sans action particuliere dans
#      le shell, affichable et peu utilise dans les payloads...
# OLD VALUE :
#   set ::APG_msg_delim "/" 
#   mais pb avec les url http://localhost/
# OLD VALUE :
#   set ::APG_msg_delim "§"
#   mais pb d'affichage dans certains terminaux et pb d'ajout de caractere
#   imprevu a la lecture avec la bibliotheque.
# Valeur au 25/4/2012
# NB : valeurs possibles : @ \ % (?), # (?)
set ::APG_msg_delim "^"

# TODO : prevoir encodage automatique a l'emission si caracteres speciaux
#        detectes

# valeur d'un champ non rempli
set ::APG_msg_unknown "-"

# Delimitor for composed arguments such as a,b,c
set ::APG_msg_delimarg ","
#-----------------------------------------------------------------------------#

#-- Variables pour la zone d'analyse du contenu ------------------------------#
set ::APG_msg_rcvvar $::APG_msg_unknown
set ::APG_msg_rcvval $::APG_msg_unknown
#-----------------------------------------------------------------------------#

#-- Generic mnemonics --------------------------------------------------------#

#-- Common mnemonics --#
# Default mnemonic for the PayLoad
set ::APG_msg_mnemopl  "${::app}pl"
# Default mnemonic for the type of message
# NB: used to give a precision on the payload type
set ::APG_msg_mnemoty  "${::app}ty"
# Default mnemonic for the flag of a message
# NB: used for stateful protocols with two states.
set ::APG_msg_mnemofl  "${::app}fl"
# Default mnemonic for the sequence number of message
# NB: (node id, nseq) is a timestamp
set ::APG_msg_mnemosq  "${::app}sq"
set ::APG_msg_mnemosn  "${::app}sn"
# Clock related information (eg. vectorial clock for DFF)
set ::APG_msg_mnemocl  "${::app}cl"
# Request message (request for something related to the associated value)
set ::APG_msg_mnemorq  "${::app}rq"

#-- Node identity related mnemonics --#
# Default mnemonic for node IDentity
set ::APG_msg_mnemoid  "${::app}id"
# Default mnemonic for Node that Sends the message
set ::APG_msg_mnemons  "${::app}ns"
# Default mnemonic for Node that Receives the message
set ::APG_msg_mnemonr  "${::app}nr"
# Default mnemonic for Node that Initiated the message
set ::APG_msg_mnemoni  "${::app}ni"

#-- Fragments related mnemonics --#
# Default mnemonic for the fragment number.
# NB: used in case the payload of the message is a fragment of a larger
#     containt, send with several messages.
set ::APG_msg_mnemofg  "${::app}fg"
# Default mnemonic for the total number of fragments
# NB: used in case the payload is a fragment of a larger containt, sent with
#     nf messages.
set ::APG_msg_mnemonf  "${::app}nf"
# Default mnemonic for the list of fragments
# NB: used to ask for missing fragments for instance
set ::APG_msg_mnemolf  "${::app}lf"

#-- User related mnemonics --#
# Default mnemonic for Identity of the Sender
# NB: this is different of the node id that is uniq and does not change.
#     eg. user pseudo. node id and user pseudo represent a single uniq user.
set ::APG_msg_mnemois  "${::app}is"
# Default mnemonic for Identity of the Receiver
# NB: this is different of the node id that is uniq and does not change.
#     eg. user pseudo. node id and user pseudo represent a single uniq user.
set ::APG_msg_mnemoir  "${::app}ir"

#-- Applications related mnemonics -- #
# Default mnemonic for an APplication name
set ::APG_msg_mnemoap  "${::app}ap"
# Default mnemonic for Application that Sends the message
set ::APG_msg_mnemoas  "${::app}as"
# Default mnemonic for Application that Receives the message
set ::APG_msg_mnemoar  "${::app}ar"

#-- Subscribing/unsubscribing between applications --#
# Default mnemonic allowing the sending application to subscribe (value=1) or
# unsubscribe (value=0) to the receiving application.
set ::APG_msg_mnemorg "${::app}sb"

#-----------------------------------------------------------------------------#

###############################################################################


### ZONE GRAPHIQUE DE LA BIBLIOTHEQUE #########################################
if { $::APG_notk == true } {
    APG_vrb_dispnotif "  option notk => pas de creation de la zone d'interface de messages" "libapg-msg.tk" 5
} else {

labelframe .msg -text "Contenu des messages"  -pady 2 -padx 2 -fg $::APG_int_coltitle

# Decoupe en trois sous-zones horizontales
labelframe .msg.h -text "Fabrication du contenu à émettre"  -pady 2 -padx 2
labelframe .msg.m -text "Emission" -padx 2 -pady 2
labelframe .msg.b -text "Analyse du contenu reçu"  -pady 2 -padx 2
pack .msg.h .msg.m .msg.b -fill both

# Zone haute
entry .msg.h.arg -textvariable ::APG_com_sndarg -width 32
button .msg.h.btplus -text "+" \
    -width 1 \
    -borderwidth 0 \
    -activebackground $::APG_int_colbutton \
    -foreground $::APG_int_colbutton \
    -highlightthickness 0 \
    -command {
				set var "mnemo"
				set val "value"
				if { $::APG_com_sndarg == $::APG_msg_unknown } {
						set ::APG_com_sndarg $::APG_msg_delim$var$::APG_msg_eq$val
				} else {
						set ::APG_com_sndarg $::APG_com_sndarg$::APG_msg_delim$var$::APG_msg_eq$val
				}
				update
    }
pack .msg.h.arg -side left -fill x -expand true -anchor nw
pack .msg.h.btplus -side left  -expand false -pady 0 -anchor nw

# Zone basse
frame .msg.b.h
frame .msg.b.b
pack .msg.b.h .msg.b.b -side top -expand true -fill both

label .msg.b.h.arg -textvariable ::APG_com_rcvarg -anchor nw -width 32 -relief sunken
pack .msg.b.h.arg  -side top -anchor nw -fill both -pady 2 -expand true

button .msg.b.b.btsplit -text "Décoder" \
    -activebackground $::APG_int_colbutton \
    -foreground $::APG_int_colbutton \
    -font $::APG_int_fnbutton \
    -width 6 \
    -command APG_msg_btsplit
pack .msg.b.b.btsplit

labelframe .msg.b.b.var -text "Mnemo"
entry .msg.b.b.var.v  -width 8 -textvariable ::APG_msg_rcvvar
pack .msg.b.b.var.v -expand no
bind .msg.b.b.var.v <Return> {
    .msg.b.b.btsplit configure -relief sunken
    APG_msg_btsplit
    after 10 { .msg.b.b.btsplit configure -relief raised }
}

labelframe .msg.b.b.val -text "Value"
label .msg.b.b.val.v -textvariable ::APG_msg_rcvval -anchor nw
pack .msg.b.b.val.v  -fill x -expand true

pack .msg.b.b.btsplit -side left -fill y -expand no
pack .msg.b.b.var -side left -fill y -expand no
pack .msg.b.b.val -side left -fill both -expand true

}
# ^ fin du if notk
###############################################################################


### PROCEDURES DE LA BIBLIOTHEQUE #############################################

proc APG_msg_btsplit { } {
    set ::APG_msg_rcvval [APG_msg_splitstr ::APG_com_rcvarg $::APG_msg_rcvvar]
    update
}

#-- Procedure APG_msg_split --------------------------------------------------#
# Action : decoupe la chaine en prenant le premier caractere comme delimiteur #
# Entree : chaine                                                             #
# Retour : tableau constitue par les champs trouves dans la chaine            #
#-----------------------------------------------------------------------------#
proc APG_msg_split { chaine  } {
    set car [string index $chaine 0]
    return [split $chaine "$car"]
}

#-- Procedure APG_msg_splitstr (split string) --------------------------------#
# Action : retrouve la valeur associee a un mnemonique dans une chaine (msg)  #
#          Permet d'exploiter le format des contenus de messages a l'arrivee. #
# Entree : nom de la chaine, mnemonique                                       #
# Remarq : varchaine designe le nom de la variable et non son contenu.        #
# Remarq : nouvelle version : retourne tout ce qui suit le premier caractere  #
#          APG_msg_eq, de maniere a autoriser des valeurs qui contiennent     #
#          elles-memes des caracteres APG_msg_eq. Exemple avec une URL :      #
#          set msg "url~http://localhost/~tintin"                             #
#          set mnemo_url "url"                                                #
#          set url [APG_msg_splitstr msg $mnemo_url]                          #
#          ==> url=http://localhost/~tintin                                   #
# Retour : valeur associee au mnemonique                                      #
#-----------------------------------------------------------------------------#
proc APG_msg_splitstr { varchaine mnemonique } {
    # Recuperation dans str de la valeur de la variable nommee varchaine dans
    # dans l'espace de nommage superieur.
    upvar $varchaine str

    # Parcours du tableau des champs mnemonique~valeur dans le message
    foreach champs [APG_msg_split $str] {
				set name [lindex [split $champs $::APG_msg_eq] 0]

				if { $name == $mnemonique } {
						return [join [lrange [split $champs $::APG_msg_eq] 1 end] $::APG_msg_eq ]
				}
    }
    
    # Mnemonique non trouve
    return $::APG_msg_unknown
}


#-- Procedure APG_msg_createmsg ----------------------------------------------#
# Action : formate un contenu de message de la forme /mnemonique~valeur       #
# Entree : mnemonique, valeur                                                 #
# Retour : chaine contenant le message formate avec les jockers standard      #
#-----------------------------------------------------------------------------#
proc APG_msg_createmsg { mnemonique valeur } {
		return 	$::APG_msg_delim$mnemonique$::APG_msg_eq$valeur$::APG_msg_delim
}

#-- Procedure APG_msg_addmsg -------------------------------------------------#
# Action : ajoute un couple /mnemonique~valeur a la fin d'un message existant #
# Entree : nom de la variable contenant le message a completer,               #
#          mnemonique et valeur a ajouter                                     #
# Remarq : varchaine designe le nom de la variable et non son contenu.        #
# Retour : chaine contenant le message formate avec les jockers standard      #
#-----------------------------------------------------------------------------#
proc APG_msg_addmsg { varchaine mnemonique valeur } {
    # Recuperation dans msg de la valeur de la variable nommee varchaine dans
    # dans l'espace de nommage superieur.
    upvar $varchaine msg
    
    # Ajout d'un delimiteur a la fin du message actuel si necessaire.
    if { [string index $msg end] != $::APG_msg_delim } { append msg $::APG_msg_delim }

    append msg $mnemonique $::APG_msg_eq $valeur

    # Ajout d'un delimiteur a la fin du message obtenu si necessaire.
		# NB : cela pourrait arriver si 'valeur' etait lui-meme un message...
    if { [string index $msg end] != $::APG_msg_delim } { append msg $::APG_msg_delim }
}

#-- Procedure APG_msg_concatemsg ---------------------------------------------#
# Action : concatene deux messges en evitant deux delimiteurs accoles.        #
# Entree : message 1, message 2                                               #
# Retour : message forme de la concatenation du message 1 et du message 2     #
#-----------------------------------------------------------------------------#
proc APG_msg_concatemsg { msg1 msg2 } {
    # Suppression d'un eventuel delimiteur de trop.
    if { [string index $msg1 end] == $::APG_msg_delim && \
						 [string index $msg2 0] == $::APG_msg_delim } {
				# msg1 termine par un delimiteur et msg2 commence par un delimiteur.
				# => on enleve le premier delimiteur de msg2
						set msg2 [string range $msg2 1 end]
				}
		return $msg1$msg2
}


#-- Procedure APG_msg_replaceval ---------------------------------------------#
# Action : remplace la valeur associee a un mnemonique dans un message        #
# Entree : nom de la variable message, mnemonique, valeur                     #
# Remarq : varchaine designe le nom de la variable et non son contenu.        #
# Retour : chaine contenant le message formate avec les jockers standard      #
#-----------------------------------------------------------------------------#
proc APG_msg_replaceval { varchaine mnemonique newval } {
    # Recuperation dans msg de la valeur de la variable nommee varchaine dans
    # dans l'espace de nommage superieur.

    upvar $varchaine str

    # Construction d'un tableau de couples mnemonique~valeur a partir du msg
    set les_champs [APG_msg_split $str]

    # Parcours du tableau
    for { set num_champs 0 } { $num_champs < [llength $les_champs] } { incr num_champs } {
				# Recuperation du champs courant
				set champs [lindex $les_champs $num_champs]
				# Recuperation du mnemonique du champs
				set var_champs [split $champs $::APG_msg_eq]
				# et de la valeur associee
				set var_nom [lindex $var_champs 0]
				
				# Si correspondance avec le mnemonique recherche, echange des valeurs
				if { $var_nom == $mnemonique } {
						set les_champs [lreplace $les_champs $num_champs $num_champs "$mnemonique$::APG_msg_eq$newval"]
						break
				}
    }
		
    # Reformatage du message avec les champs de la liste, separes par le
    # premier caractere de la chaine (qui est le separateur de champs)
    set str [join $les_champs [string index $str 0]]
}

#-- Procedure APG_msg_endstr -------------------------------------------------#
# Action : retourne la fin du message a partir d'un mnemonique, exclu ou non  #
#          exemple : str=/lat~1/lon~2/msg~3/seq~4/                            #
#          APG_msg_endstr str "lon" retourne /lon~2/msg~3/seq~4/              #
#          APG_msg_endstr str "msg" retourne /msg~3/seq~4/                    #
#          APG_msg_endstr str "lon" true retourne /msg~3/seq~4/               #
# Entree : nom de la variable message, mnemonique limite, exclu ou non        #
# Remarq : varchaine designe le nom de la variable et non son contenu.        #
#          le troisieme parametre est optionel                                #
# Retour : chaine contenant la fin du message ainsi definie si le mnemonique  #
#          est trouve et la chaine entiere sinon                              #
#-----------------------------------------------------------------------------#
proc APG_msg_endstr { varchaine mnemolimite {exclu false} } {
    # Recuperation dans str de la valeur de la variable nommee varchaine dans
    # dans l'espace de nommage superieur.
    upvar $varchaine str
    
    set les_champs [APG_msg_split $str]
    set indexlimite [lsearch $les_champs $mnemolimite*]

		# Precaution au cas ou le mnemolimite n'etait pas trouve
		if { $indexlimite < 0 } {
				APG_vrb_dispwarning "mnemolimite not found => return the entire message" "APG_msg_endstr"
				return $str
		}

    if { $exclu == true } {
				incr indexlimite
    }
    set endlist [lrange $les_champs $indexlimite end]
    set endstr [string index $str 0][join $endlist [string index $str 0]]
    return $endstr
}


#-- Procedure APG_msg_splitmsg -----------------------------------------------#
# Action : retourne la liste des sous-messages concatenes dans un message et  #
#          commencant tous par firstmnemo                                     #
#          exemple : msg=/lat~10/lon~11//lat~20/lon~21//lat~30/lon~31/        #
#          APG_msg_splitmsg msg "lat" retourne la liste des messages suivante #
#          /lat~10/lon~11/ /lat~20/lon~21/ /lat~30/lon~31/                    #
# Entree : nom de la variable message, premier mnemonique des sous-messages   #
# Remarq : varchaine designe le nom de la variable et non son contenu.        #
# Retour : liste contenant les sous-messages trouves ; elle est vide si aucun #
#          firstmnemo trouve.                                                 #
#-----------------------------------------------------------------------------#
proc APG_msg_splitmsg { varchaine firstmnemo } {
    # Recuperation dans msg de la valeur de la variable nommee varchaine
		# dans l'espace de nommage superieur. Cette variable contient des messages
		# concatenes, commencant tous par firstmnemo.
    upvar $varchaine msg

		# Le separateur de champs est le premier caractere des sous-messages, ie.
		# le premier caractere du msg
		set separateur [string index $msg 0]
		# les_champs est une liste contenant tous les champs des sous-messages
		# concatenes dans msg.
    set les_champs [APG_msg_split $msg]

		# Liste resultat, chaque element contiendra un message, debutant par
		# firstmnemo.
		set les_messages [list ]

		# Indice de debut de sous-message
		set i [lsearch $les_champs $firstmnemo*]
		# Indice de fin de sous-message
		set j 0

		if { $i == -1 } {
				# Aucun firstmnemo trouve, donc aucun sous-message
				# => on retourne une liste contenant un seul terme, le message initial
				return [list $msg]
		}

		# Recherche iterative des sous-messages
		while { $i != -1 } {
				# Il reste au moins un mnemonique dans la liste les_champs ; 
				# le premier d'entre eux est a la position i.
				
				# On en recherche un autre apres cette occurence, en considerant
				# une sous-liste debutant apres la position i.
				set j [lsearch [lrange $les_champs [expr $i + 1] end] $firstmnemo*]

				if { $j == -1 } {
						# Il n'y a plus de mnemonique apres la position i ; fin de la boucle
						break
				}

				# Il y a un mnemonique a la position j apres la position i.
				# Calcul de sa position depuis le debut de la liste les_champs.
				set j [expr $j + $i]

				# On peut maintenant extraire la sous-liste, entre les positions i et j.
				set sous_liste [lrange $les_champs $i $j]
				# Et en deduire le message correspondant en concatenant les champs avec
				# le separateur.
				set sous_message $separateur[join $sous_liste $separateur]
				# On l'ajoute a la liste-resultat, contenant les sous-messages trouves
				lappend les_messages $sous_message
				
				# On decale l'indice de debut a la fin de la sous-liste trouvee
				# avant de recommencer la boucle.
				set i [expr $j + 1]
		}

		# Reste a traiter la fin de la liste les_champs, qui ne contient plus
		# de firstmnemo apres le premier.
		# La sous-liste est composee de tous les derniers champs restants
		set sous_liste [lrange $les_champs $i end]
		# On en deduit le message correspondant en concatenant avec le separateur.
		set sous_message $separateur[join $sous_liste $separateur]
		# Et on l'ajoute a la liste-resultat.
		lappend les_messages $sous_message

		return $les_messages
}

