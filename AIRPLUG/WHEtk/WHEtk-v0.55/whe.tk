#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"

#    whe
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr
#    license type: free of charge license for academic and research purpose
#    see license.txt

# An example of application using communication type whatwhowhere



### 1. STANDARD INITIALISATION OF THE AIRPLUG COMPATIBLE APPLICATION ###########

# Standard name of the application and language extension ----------------------
set APP "WHE"
set app "whe"
set ll  "tk"

# Get environment variables and test the library -------------------------------
# APG_PATH gives the path to the AIPLUG folder
# APG_LANG give the language to display messages
if { [ catch {
		set APG_PATH $env(APG_PATH)
		set APG_LANG $env(APG_LANG)
    set libapgfile [open $APG_PATH/LIBAPG$ll/LIBAPG$ll/libapg.$ll r]
    close $libapgfile
} ] } {
    if { [info exists APG_PATH] == 0 } {
				set APG_PATH "??"
    }
    if { [info exists APG_LANG] == 0 } {
				set APG_LANG "english"
    }
		if { $APG_LANG == "french" } {
				puts stderr "\n\033\[1;31m- $::app\(local\): libapg.tk non trouvee\n \
                         Verifier l'installation. APG_PATH=$APG_PATH\n \
                         Se placer dans le repertoire bin, faire source config.sh\n \
                         Se reporter a la documentation en ligne. Contacter l'equipe Airplug.\
                         \033\[0;00m\n"
		} else {
				puts stderr "\n\033\[1;31m- $::app\(local\): libapg.tk not found\n \
                         Check the installation. APG_PATH=$APG_PATH\n \
                         In the bin directory, type source config.sh\n \
                         See the on-line documentation. Contact the Airplug team.\
                         \033\[0;00m\n"
		}				
    exit
} else {
    source $APG_PATH/LIBAPG$ll/LIBAPG$ll/libapg.tk
		if { $APG_LANG == "french" } {
				APG_vrb_dispnotif "utilisation de la distribution airplug $APG_PATH"
		} else {
				APG_vrb_dispnotif "using the Airplug distribution $APG_PATH"
		}
}


# Variables overloading --------------------------------------------------------
# Default values set by LIBAPG may be overloaded here.
set APP_msgapropos \
"WHE v0.54
application template for whatwhowhere communications
Bertrand Ducourthial AT utc.fr
Lab. Heudiasyc, UMR CNRS 7253
Universite de Technologie de Compiegne
See license.txt"
set APP_msghelp \
"
Application template for whatwhowhere communications
"


### 2. ADDING APPLICATION COMPONENTS ###########################################

# Loading source file ----------------------------------------------------------
source $PATH/whe-snd.tk
source $PATH/whe-rcv.tk
source $PATH/whe-svg.tk

# Adding GUI area --------------------------------------------------------------
APG_int_addzone whesnd "Emissions" 1
APG_int_addzone whercv "Receptions" 1

APG_int_displayzones



### 3. DEFINING START/STOP PROCEDURES ##########################################

#-- Procedure WHE_start -------------------------------------------------------#
# Action : start the application                                               #
# Remark : called by APG_start                                                 #
# Input  : nothing                                                             #
# Output : nothing                                                             #
#------------------------------------------------------------------------------#
proc WHE_start { } {

		APG_vrb_dispnotif "Starting $::APP" "WHE_start" 3
    

		# if { $::APG_remote == true } {
		# 		APG_vrb_dispnotif "  Mode remote; waiting for phase 3 of connection" "${::APP}_start" 3
		# 		APG_vrb_dispdebug "APG_rmt_phase=$::APG_rmt_phase"
		# 		while { $::APG_rmt_phase != 3 } {
		# 				APG_vrb_dispnotif "  waiting 1sec" "${::APP}_start" 4
		# 				after 1000
		# 				APG_vrb_dispnotif "  waiting 1sec" "${::APP}_start" 4
		# 		}
		# 		APG_vrb_dispnotif "  Phase 3 reached" "${::APP}_start" 3
		# }
										 
    # Abonnements
		#   WHE doit s'abonner a elle meme
		#   (en communication de type whatwho et whatwhowhere)
		#   NB : using $::APP instead of WHE to take into account --appname
		APG_begin_air $::APP
		#   Pour tester les abonnements entre applications, decommenter les
		#   lignes suivantes
		# APG_begin_air "WHA"
		# APG_begin_air "WHO"

    # Le bouton Envoyer de la zone d'emission devient "actif"
    .whesnd.bt configure -state active
    
    # Touche entree sur les sous-zones de saisies => emission
    bind .whesnd.msg.v <Return> {
				.whesnd.bt configure -relief sunken
				APG_send_whatwhowhere $WHE_snd_msg $WHE_snd_app $WHE_snd_hst
				after 10 {  .whesnd.bt configure -relief raised }
    }
    bind .whesnd.app.v <Return> {
				.whesnd.bt configure -relief sunken
				APG_send_whatwhowhere $WHE_snd_msg $WHE_snd_app $WHE_snd_hst
				after 10 {  .whesnd.bt configure -relief raised }
    }
    bind .whesnd.hst.v <Return> {
				.whesnd.bt configure -relief sunken
				APG_send_whatwhowhere $WHE_snd_msg $WHE_snd_app $WHE_snd_hst
				after 10 {  .whesnd.bt configure -relief raised }
    }
}

#-- Procedure WHE_stop --------------------------------------------------------#
# Action : stop the application                                                #
# Remark : called by APG_stop                                                  #
# Input  : nothing                                                             #
# Output : nothing                                                             #
#------------------------------------------------------------------------------#
proc WHE_stop { } {
		APG_vrb_dispnotif "Stopping $::APP" "WHE_stop" 3
}


### 4. LAUNCHING THE APPLICATION ###############################################
APG_init



